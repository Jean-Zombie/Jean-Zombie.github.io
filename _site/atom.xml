<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Jean Zombie</title>
 <link href="/atom.xml" rel="self"/>
 <link href="/"/>
 <updated>2017-08-07T17:42:49+02:00</updated>
 <id></id>
 <author>
   <name>Jean Zombie</name>
   <email></email>
 </author>

 
 <entry>
   <title>Python decorators</title>
   <link href="/2017/08/04/python-decorators/"/>
   <updated>2017-08-04T13:35:48+02:00</updated>
   <id>/2017/08/04/python-decorators</id>
   <content type="html">&lt;p&gt;For quite some time I am trying to understand Python’s decorator logic. I think I might kill someone, kill someone, kill someone&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Jekyll's autobuild feature</title>
   <link href="/2017/07/13/test-jekyllatom-autobuild/"/>
   <updated>2017-07-13T12:34:53+02:00</updated>
   <id>/2017/07/13/test-jekyllatom-autobuild</id>
   <content type="html">&lt;p&gt;I had one problem with my blog workflow: The manual building of the html with &lt;em&gt;Jekyll&lt;/em&gt;. After I finished writing a post in &lt;em&gt;Atom&lt;/em&gt; I would have had to manually execute &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt; in my bash before I could push the changes to GitHub.&lt;/p&gt;

&lt;p&gt;But it doesn’t need to be like that. You can simply add this line to your &lt;em&gt;_config.yml&lt;/em&gt;: &lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;Atom:&lt;/code&gt;&lt;br /&gt;
      &lt;code class=&quot;highlighter-rouge&quot;&gt;Jekyll: Toggle Auto Build&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now, whenever you save your article in &lt;em&gt;Atom&lt;/em&gt; the html will be build automatically. Given the path to your &lt;em&gt;Jekyll&lt;/em&gt; binary is set and recognized by &lt;em&gt;Atom&lt;/em&gt;. I had to provide the full path in the &lt;em&gt;Jekyll-Atom&lt;/em&gt;-plugin under “Settings”, “Build command”:  &lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;[path/to/your/jekyll/bin], build&lt;/code&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Atom - my new go-to texteditor</title>
   <link href="/2017/07/13/atom-my-new-go-to-texteditor/"/>
   <updated>2017-07-13T10:09:09+02:00</updated>
   <id>/2017/07/13/atom--my-new-go-to-texteditor</id>
   <content type="html">&lt;p&gt;I used &lt;em&gt;Textwrangler&lt;/em&gt; as my universal text editor and it did a good job. But since I discovered &lt;em&gt;Atom&lt;/em&gt; I feel like I missed a few years of development.  &lt;br /&gt;
Here is a quick overview of what I discovered so far:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;you can install custom packages, e.g. for &lt;em&gt;Jekyll&lt;/em&gt; or a markdown preview&lt;/li&gt;
  &lt;li&gt;Git support is built in&lt;/li&gt;
  &lt;li&gt;custom themes, e.g. dark&lt;/li&gt;
  &lt;li&gt;it is free&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’ll keep digging and post new discoveries.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>setup a blog on github with Jekyll (mac os sierra)</title>
   <link href="/2017/07/11/install-jekyll-on-mac-os/"/>
   <updated>2017-07-11T11:43:34+02:00</updated>
   <id>/2017/07/11/install-jekyll-on-mac-os</id>
   <content type="html">&lt;p&gt;What could be a better topic for a first blogpost than a how-to about setting up the blog itself? I read a lot about the combination of github (hosting) and Jekyll (serving) for a personal blog. But it wasn’t as easy as it first seemed. I started off with this &lt;a href=&quot;http://www.abstractclass.org/tutorial/blog/2015/05/19/tutorial-personal-blog-with-github.html&quot;&gt;tutorial&lt;/a&gt; which covers the basics of setting up a github repo designated for blogging.&lt;/p&gt;

&lt;p&gt;Problems began when I tried using Jekyll. Jekyll needs a Ruby version higher then 2.1 but my built-in ruby is only 2.0. Homebrew to the rescue.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Install Ruby with &lt;a href=&quot;https://goo.gl/rXYZsT&quot;&gt;homebrew:&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Install Jekyll: &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo gem install Jekyll&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Problems didn’t stop here though. I wanted to use &lt;a href=&quot;https://goo.gl/XQRkY7&quot;&gt;Hyde&lt;/a&gt; as a theme which has some dependencies that weren’t met. Also it’s config file was outdated. Solutions:&lt;/p&gt;

&lt;p&gt;In the &lt;em&gt;_config.yml&lt;/em&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;change “gem” to “plugins”&lt;/li&gt;
  &lt;li&gt;add “[jekyll-paginate, jekyll-gist]” as plugins&lt;/li&gt;
  &lt;li&gt;comment out “relative_permalinks” or set it to “false”&lt;/li&gt;
  &lt;li&gt;add “paginate_path: ‘page:num’”&lt;/li&gt;
  &lt;li&gt;remove the whole “markdown” line&lt;/li&gt;
  &lt;li&gt;change “highlighter” value to “rouge”, since github doesn’t use “pygments”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You probably also need to install said plugins:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;gem install jekyll-paginate&lt;/li&gt;
  &lt;li&gt;gem install jekyll-gist&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To test everything head over to the location of your local git repo and fire up the server with &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;. Then push it and it should work.&lt;/p&gt;
</content>
 </entry>
 

</feed>
